// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider            = "prisma-kysely"
  output              = "../src/database"
  fileName            = "schema.ts"
  enumFileName        = "enums.ts"
  previewFeatures     = ["postgresqlExtensions"]
  decimalTypeOverride = "number"
  bigIntTypeOverride  = "number"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext, uuidOssp(map: "uuid-ossp")]
}

model User {
  id                 String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email              String             @unique @db.Citext
  github_id          String             @unique
  github_username    String             @unique
  name               String             @default("")
  phone              String             @default("")
  country            String             @default("us")
  street_address     String             @default("")
  city               String             @default("")
  state              String             @default("")
  postal_code        String             @default("")
  pronouns           String             @default("")
  avatar_id          String?            @db.Uuid
  avatar             FileUpload?        @relation(name: "Avatar", fields: [avatar_id], references: [id])
  links              UserLink[]
  resume_title       ResumeTitle[]
  resume_objective   ResumeObjective[]
  employment_history JobDetails[]
  skills             Skills[]
  schhol_enrollment  SchoolEnrollment[]
  sessions           Session[]
  file_upload        FileUpload[]       @relation("UploadedBy")

  @@map("users")
}

model Session {
  id         String   @id @unique
  expires_at DateTime
  user_id    String   @db.Uuid
  user       User     @relation(fields: [user_id], references: [id])

  @@map("sessions")
}

model FileUpload {
  id             String @id @db.Uuid
  name           String
  ext            String
  path           String
  uploaded_by_id String @db.Uuid
  uploaded_by    User   @relation(name: "UploadedBy", fields: [uploaded_by_id], references: [id])
  type           String
  description    String
  mime_type      String
  size           Int
  height         Int?
  width          Int?
  avatar_users   User[] @relation("Avatar")

  @@index([type])
  @@map("file_uploads")
}

model UserLink {
  id      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id String @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])
  url     String
  type    String

  @@unique([user_id, type])
  @@map("user_links")
}

model ResumeTitle {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String  @db.Uuid
  user       User    @relation(fields: [user_id], references: [id])
  title      String
  is_default Boolean @default(false)

  @@map("resume_titles")
}

model ResumeObjective {
  id         String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String  @db.Uuid
  user       User    @relation(fields: [user_id], references: [id])
  objective  String
  is_default Boolean @default(false)

  @@map("resume_objectives")
}

model Company {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String
  industry    String

  @@map("companies")
}

model JobDetails {
  id                  String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id             String         @db.Uuid
  user                User           @relation(fields: [user_id], references: [id])
  title               String         @default("")
  company             String         @default("")
  description         String         @default("")
  start_date          DateTime?      @db.Date
  end_date            DateTime?      @db.Date
  is_current_position Boolean        @default(false)
  highlights          JobHighlight[]

  @@index([start_date])
  @@index([end_date])
  @@index([is_current_position])
  @@map("job_details")
}

model JobHighlight {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  job_id      String     @db.Uuid
  job         JobDetails @relation(fields: [job_id], references: [id])
  description String

  @@map("job_highlights")
}

model School {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String

  @@map("schools")
}

model SchoolEnrollment {
  id             String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id        String                @db.Uuid
  user           User                  @relation(fields: [user_id], references: [id])
  degree         String
  field_of_study String
  gpa            Float?
  school         String
  location       String
  start_date     DateTime?             @db.Date
  end_date       DateTime?             @db.Date
  highlights     ScholasticHighlight[]

  @@index([start_date])
  @@index([end_date])
  @@map("school_enrollment")
}

model ScholasticHighlight {
  id            String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  enrollment_id String           @db.Uuid
  enrollment    SchoolEnrollment @relation(fields: [enrollment_id], references: [id])
  description   String

  @@index([description])
  @@map("scholastic_highlights")
}

model Skills {
  id          String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String @db.Uuid
  user        User   @relation(fields: [user_id], references: [id])
  description String
  level       Int    @default(3)

  @@map("skills")
}
