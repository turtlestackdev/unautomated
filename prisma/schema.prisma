// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider            = "prisma-kysely"
  output              = "../src/database"
  fileName            = "schema.ts"
  enumFileName        = "enums.ts"
  decimalTypeOverride = "number"
  bigIntTypeOverride  = "number"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id
  email              String             @unique
  github_id          String             @unique
  github_username    String             @unique
  name               String             @default("")
  phone              String             @default("")
  country            String             @default("us")
  street_address     String             @default("")
  city               String             @default("")
  state              String             @default("")
  postal_code        String             @default("")
  pronouns           String             @default("")
  avatar_id          String?
  avatar             FileUpload?        @relation(name: "Avatar", fields: [avatar_id], references: [id])
  links              UserLink[]
  resume_title       ResumeTitle[]
  resume_objective   ResumeObjective[]
  employment_history JobTitle[]
  skills             Skills[]
  schhol_enrollment  SchoolEnrollment[]
  sessions           Session[]
  file_upload        FileUpload[]       @relation("UploadedBy")

  @@map("users")
}

model Session {
  id         String @id
  expires_at Int
  user_id    String
  user       User   @relation(fields: [user_id], references: [id])

  @@map("sessions")
}

model FileUpload {
  id             String @id
  name           String
  ext            String
  path           String
  uploaded_by_id String
  uploaded_by    User   @relation(name: "UploadedBy", fields: [uploaded_by_id], references: [id])
  type           String
  description    String
  mime_type      String
  size           Int
  height         Int?
  width          Int?
  avatar_users   User[] @relation("Avatar")

  @@index([type])
  @@map("file_uploads")
}

model UserLink {
  id      Int    @id @default(autoincrement())
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
  url     String
  type    String

  @@unique([user_id, type])
  @@map("user_links")
}

model ResumeTitle {
  id         Int     @id @default(autoincrement())
  user_id    String
  user       User    @relation(fields: [user_id], references: [id])
  title      String
  is_default Boolean @default(false)

  @@map("resume_titles")
}

model ResumeObjective {
  id         Int     @id @default(autoincrement())
  user_id    String
  user       User    @relation(fields: [user_id], references: [id])
  objective  String
  is_default Boolean @default(false)

  @@map("resume_objectives")
}

model Company {
  id               Int        @id @default(autoincrement())
  name             String
  description      String
  industry         String
  employee_history JobTitle[]

  @@map("companies")
}

model JobTitle {
  id                  Int                        @id @default(autoincrement())
  user_id             String
  user                User                       @relation(fields: [user_id], references: [id])
  title               String
  company_id          Int
  company             Company                    @relation(fields: [company_id], references: [id])
  start_date          DateTime
  end_date            DateTime?
  is_current_position Boolean                    @default(false)
  responibilities     Responibility[]
  achievements        ProfessionalAchievements[]

  @@index([start_date])
  @@index([end_date])
  @@index([is_current_position])
  @@map("job_titles")
}

model Responibility {
  id          Int      @id @default(autoincrement())
  job_id      Int
  job         JobTitle @relation(fields: [job_id], references: [id])
  description String

  @@map("responsibilites")
}

model ProfessionalAchievements {
  id          Int      @id @default(autoincrement())
  job_id      Int
  job         JobTitle @relation(fields: [job_id], references: [id])
  description String

  @@map("professional_achievements")
}

model School {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  enrollment  SchoolEnrollment[]

  @@map("schools")
}

model SchoolEnrollment {
  id                    Int                      @id @default(autoincrement())
  user_id               String
  user                  User                     @relation(fields: [user_id], references: [id])
  degree                String
  gpa                   Float
  school_id             Int
  school                School                   @relation(fields: [school_id], references: [id])
  start_date            DateTime
  end_date              DateTime?
  is_currently_enrolled Boolean                  @default(false)
  achievements          ScholasticAchievements[]

  @@index([start_date])
  @@index([end_date])
  @@index([is_currently_enrolled])
  @@map("school_enrollment")
}

model ScholasticAchievements {
  id            Int              @id @default(autoincrement())
  enrollment_id Int
  enrollment    SchoolEnrollment @relation(fields: [enrollment_id], references: [id])
  description   String

  @@map("scholastic_achievements")
}

model Skills {
  id          Int    @id @default(autoincrement())
  user_id     String
  user        User   @relation(fields: [user_id], references: [id])
  description String
  level       Int    @default(3)

  @@map("skills")
}
